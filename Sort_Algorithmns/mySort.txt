The sorting method we used is called heap sort.

To understand heap sort first we need to understand binary tree and heaps.

An array can be represent as a binary tree in the following way:
[2, 18, 6, 7, , 17]

			 2
		  /    \
		 18     6
		/  \   /  \
	   7      17
The first element becomes the top/parent element and the subsequent elements are placed lower starting from the left.
Since this array has a missing element, this is called an imcomplete binary tree.

A heap is a complete binary tree.
[2, 18, 6, 7, 8]

			2           height = 0
		  /  \
		 18   6         h = 1
		/  \   
	   7    8           h = 2
	   
This is a complete binary tree meaning starting from the top and the left no element is missing and if we remove the last row of tree 
ie. remove h = 2 we get a full binary tree.

Now a min heap is a sorted heap in which parent elements are smaller than the child elements.To achieve this we compare a parent 
element to its child and keep swapping until all parent elements are smaller than the child.
[2, 6, 7, 8, 18]

			2           height = 0
		  /  \
		 8    6         h = 1
		/  \   
	   7    18          h = 2
	   
In a heap sort algorithm we will first create a min heap and then start deleting the heap from the top of the tree,
so 2 gets deleted and the array now become [6,7,8,18, ], in that last empty index we place the 2 then we delete 6 7 8 and 18.
Eventually we get the array [18,8,7,8,2] which is what the deleted elements form.

--Time Complexity
If we take a look at the worst case scenario, we have to use for-loops to iterate through the entire array which means O(n)
and also jump from child to parent node to the top of the heap which means O(logn). This means the time complexity for 
heapsort is O(nlogn).

--Space Complexity
When deleting we were just placing elements to an empty index so we did not create an extra array. Therefore, the space
complexity is O(1)
